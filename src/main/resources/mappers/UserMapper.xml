<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ordersystem.dao.UserDao">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.ordersystem.entity.User">
        <id column="user_id" property="userId" />
        <result column="username" property="username" />
        <result column="password" property="password" />
        <result column="real_name" property="realName" />
        <result column="phone" property="phone" />
        <result column="email" property="email" />
        <result column="address" property="address" />
        <result column="avatar_data" property="avatarData" jdbcType="BLOB"/> <!-- 添加 avatarData 映射 -->
        <result column="role" property="role" /> <!-- 添加 role 映射 -->
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
        <!-- 移除了不存在的last_login_time字段映射 -->
    </resultMap>
    
    <!-- 公共列 -->
    <sql id="Base_Column_List">
        user_id, user_uuid, username, password, real_name, phone, email, address, role, status, create_time, update_time
    </sql>
    
    <!-- 添加用户 -->
    <insert id="insertUser" parameterType="com.ordersystem.entity.User" useGeneratedKeys="true" keyProperty="userId">
        INSERT INTO user (
            user_uuid, username, password, real_name, phone, email, address, avatar_data, role, create_time, update_time
        ) VALUES (
            #{userUuid}, #{username}, #{password}, #{realName}, #{phone}, #{email}, #{address}, #{avatarData, jdbcType=BLOB}, #{role,jdbcType=INTEGER}, NOW(), NOW()
        )
    </insert>
    
    <!-- 根据ID删除用户 -->
    <delete id="deleteUserById" parameterType="java.lang.Integer">
        DELETE FROM user WHERE user_id = #{userId}
    </delete>
    
    <!-- 更新用户信息 -->
    <update id="updateUser" parameterType="com.ordersystem.entity.User">
        UPDATE user
        <set>
            <if test="username != null">username = #{username},</if>
            <if test="password != null">password = #{password},</if>
            <if test="realName != null">real_name = #{realName},</if>
            <if test="phone != null">phone = #{phone},</if>
            <if test="email != null">email = #{email},</if>
            <if test="address != null">address = #{address},</if>
            <if test="avatarData != null">avatar_data = #{avatarData, jdbcType=BLOB},</if> <!-- 添加 avatarData 更新 -->
            <if test="status != null">status = #{status},</if> <!-- 添加 status 更新 -->
            <if test="role != null">role = #{role},</if> <!-- 添加 role 更新 -->
            update_time = NOW()
        </set>
        WHERE user_id = #{userId}
    </update>
    
    <!-- 根据ID查询用户 -->
    <select id="getUserById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
            , avatar_data
        FROM user
        WHERE user_id = #{userId}
    </select>
    
    <!-- 根据用户名查询用户 -->
    <select id="getUserByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM user
        WHERE username = #{username}
    </select>
    
    <!-- 查询所有用户 -->
    <select id="getAllUsers" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM user
        ORDER BY user_id
    </select>
    
    <!-- 根据条件筛选查询用户 -->
    <select id="getUsersByFilter" parameterType="com.ordersystem.entity.User" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" />
        FROM user
        <where>
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="role != null">
                AND role = #{role}
            </if>
            <if test="status != null">
                AND status = #{status}
            </if>
        </where>
        ORDER BY user_id DESC
    </select>
</mapper>